var searchIndex = new Map(JSON.parse('[\
["vrd",{"doc":"<code>Random (VRD)</code> 🦀","t":"EHHCCQQQQQQQQQQQQQQQQQQQQCQHFNNNNNNNNNNNNNOOOONNNNNNNNNNNOONNNNNONFNNNNNNNNNNNNNNNNNNNNNNNONONNNNNNNNNNNNNNNNNNNNN","n":["MersenneTwisterConfig","create_log_entry","log_entry_async","macros","mersenne_twister","rand_alphanumeric","rand_bool","rand_bytes","rand_char","rand_choose","rand_double","rand_exponential","rand_float","rand_int","rand_new","rand_normal","rand_poisson","rand_pseudo","rand_range","rand_seed","rand_shuffle","rand_string","rand_twist","rand_uint","rand_weighted_choice","random","random_range","run","MersenneTwisterConfig","borrow","borrow_mut","clone","clone_into","cmp","default","deserialize","eq","fmt","fmt","from","hash","into","lower_mask","m","matrix_a","n","new","new_custom","partial_cmp","serialize","set_lower_mask","set_m","set_matrix_a","set_n","set_tempering_mask_b","set_tempering_mask_c","set_upper_mask","tempering_mask_b","tempering_mask_c","to_owned","to_string","try_from","try_into","type_id","upper_mask","vzip","Random","bool","borrow","borrow_mut","bytes","char","choose","clone","clone_into","cmp","default","deserialize","double","eq","exponential","f64","float","fmt","fmt","from","hash","i64","int","into","mt","mti","mti","new","normal","partial_cmp","poisson","pseudo","rand","random_range","range","seed","serialize","set_mti","string","to_owned","to_string","try_from","try_into","twist","type_id","u64","uint","vzip"],"q":[[0,"vrd"],[28,"vrd::mersenne_twister"],[66,"vrd::random"],[114,"rlg::log_level"],[115,"rlg::log"],[116,"core::error"],[117,"alloc::boxed"],[118,"core::result"],[119,"core::cmp"],[120,"serde::de"],[121,"core::fmt"],[122,"core::fmt"],[123,"core::option"],[124,"serde::ser"],[125,"alloc::string"],[126,"core::any"],[127,"alloc::vec"]],"d":["","Create a new log entry.","Log an entry asynchronously.","The <code>macros</code> module contains functions for generating macros.","The <code>mersenne_twister</code> module contains the implementation of …","Generates a random alphanumeric character (a-z, A-Z, 0-9).","Generate a random boolean with a provided probability.","Generate a vector of random bytes with the provided length …","Generate a random char within the range ‘a’..=‘z’ …","Generate a random element from a slice of values using the …","Generate a random double using the provided <code>Random (VRD)</code> …","Generate a random number from the exponential distribution …","Generate a random float using the provided <code>Random (VRD)</code> …","Generate a random integer within the given range using the …","Generate a new random number","Generate a normally distributed random number with the …","Generates a random number from a Poisson distribution with …","Generate a random 32-bit unsigned integer using the …","Generate a random number within the given range using the …","Seed the provided <code>Random (VRD)</code> struct with the given value","Shuffles a mutable slice randomly.","Generates a random string of the specified length.","Twist the state of the provided <code>Random (VRD)</code> struct","Generate a random 32-bit unsigned integer within the given …","Selects a random element from a slice based on the …","The <code>random</code> module contains the implementation of the <code>Random</code>…","Generate a random 32-bit unsigned integer within the given …","The main entry point for the <code>Random (VRD)</code> library.","Configuration for the Mersenne Twister algorithm.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","A constant value used in the Mersenne Twister algorithm.","The number of elements to skip in the array used for the …","A constant value used in the Mersenne Twister algorithm.","The number of elements in the array used for the Mersenne …","Creates a new <code>MersenneTwisterConfig</code> with default values.","Creates a new <code>MersenneTwisterConfig</code> with customizable …","","","Sets the lower_mask constant value.","Sets the number of elements to skip.","Sets the matrix_a constant value.","Sets the number of elements in the array.","Sets the tempering_mask_b constant value.","Sets the tempering_mask_c constant value.","Sets the upper_mask constant value.","A constant value used in the Mersenne Twister algorithm.","A constant value used in the Mersenne Twister algorithm.","","","","","","A constant value used in the Mersenne Twister algorithm.","","The <code>Random</code> struct is used to generate random numbers using …","Returns a random bool with a specified probability.","","","Generates a vector of random bytes of the specified length.","Generates a random character within the range ‘a’ to …","Selects a random element from a provided slice.","","","","Returns a default random number generator","","Generates a random double-precision floating-point number.","","Generates a random number from an exponential distribution …","Generates a random 64-bit floating-point number in the …","Generates a random floating-point number in the range […","","Returns a formatted string representation of the <code>Random</code> …","Returns the argument unchanged.","","Generates a random 64-bit signed integer.","Generates a random integer within a specified range.","Calls <code>U::from(self)</code>.","The array of unsigned 32-bit integers used to generate …","Returns the current index of the internal state array used …","The current index of the array used in the generation of …","Creates a new instance of the <code>Random</code> struct, initializing …","Generates a random number from a standard normal …","","Generates a random number from a Poisson distribution with …","Generates a pseudo-random number by combining multiple …","Generates a random 32-bit unsigned integer using the …","Generates a random 32-bit unsigned integer within a …","Generates a random number within a specified range of …","Seeds the random number generator with a specified value.","","Sets the value of the current index of the internal state …","Generates a random string of the specified length.","","","","","Performs the “twisting” operation to update the …","","Generates a random 64-bit unsigned integer.","Generates a random unsigned integer within a specified …",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21],"f":"`{{bbdb}f}{fh}````````````````````````{{}{{n{h{l{j}}}}}}`{ce{}{}}0{A`A`}{{ce}h{}{}}{{A`A`}Ab}{{}A`}{c{{n{A`}}}Ad}{{A`A`}Af}{{A`Ah}Aj}0{cc{}}{{A`c}hAl}9````5{{AnAnB`B`B`B`B`}A`}{{A`A`}{{Bb{Ab}}}}{{A`c}nBd}{{A`B`}h}{{A`An}h}10111``>{cBf{}}{c{{n{e}}}{}{}}0{cBh{}}`{ce{}{}}`{{BjBl}Af}11{{BjAn}{{C`{Bn}}}}{BjCb}{{Bj{Cd{c}}}{{Bb{c}}}{}}{BjBj}{{ce}h{}{}}{{BjBj}Ab}{{}Bj}{c{{n{Bj}}}Ad}{BjBl}{{BjBj}Af}{{BjBl}Bl}2{BjCf}{{BjAh}Aj}0{cc{}}{{Bjc}hAl}{BjCh}{{BjCjCj}Cj}{ce{}{}}`{BjAn}`<{{BjBlBl}Bl}{{BjBj}{{Bb{Ab}}}}{{BjBl}Cl}{BjB`}0{{BjB`B`}B`}7{{BjB`}h}{{Bjc}nBd}{{BjAn}h}{{BjAn}Bf}:{cBf{}}{c{{n{e}}}{}{}}0{Bjh}{cBh{}}{BjCl}9?","c":[],"p":[[1,"str"],[6,"LogLevel",114],[5,"Log",115],[1,"unit"],[10,"Error",116],[5,"Box",117],[6,"Result",118],[5,"MersenneTwisterConfig",28],[6,"Ordering",119],[10,"Deserializer",120],[1,"bool"],[5,"Formatter",121],[8,"Result",121],[10,"Hasher",122],[1,"usize"],[1,"u32"],[6,"Option",123],[10,"Serializer",124],[5,"String",125],[5,"TypeId",126],[5,"Random",66],[1,"f64"],[1,"u8"],[5,"Vec",127],[1,"char"],[1,"slice"],[1,"f32"],[1,"i64"],[1,"i32"],[1,"u64"]],"b":[[37,"impl-Debug-for-MersenneTwisterConfig"],[38,"impl-Display-for-MersenneTwisterConfig"],[83,"impl-Debug-for-Random"],[84,"impl-Display-for-Random"]]}],\
["xtask",{"doc":"This is the main entry point for the xtask crate.","t":"H","n":["main"],"q":[[0,"xtask"],[1,"anyhow"],[2,"core::result"]],"d":[""],"i":[0],"f":"{{}{{f{bd}}}}","c":[],"p":[[1,"unit"],[5,"Error",1],[6,"Result",2]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
