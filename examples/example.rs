// Copyright Â© 2023-2024 Random (VRD) library. All rights reserved.
// SPDX-License-Identifier: Apache-2.0 OR MIT
// This file is part of the `Random (VRD)` library, a Rust implementation of the Mersenne Twister RNG.
// See LICENSE-APACHE.md and LICENSE-MIT.md in the repository root for full license information.

//! Example code using the `vrd` crate.
//!
//! This example demonstrates the usage of the `vrd` crate for generating random numbers.
//! It covers a variety of functionalities provided by the `vrd` crate, including generating
//! random booleans, integers, floating-point numbers, and more complex operations like seeding
//! and state manipulation of the random number generator (RNG).
//!
//! ## Examples
//!
//! - Generating a random number: Demonstrates how to generate a random number using the `rand` method.
//!
//! - Generating a random double-precision floating-point number: Shows how to generate a random floating-point number within the range [0.0, 1.0).
//!
//! - Seeding the RNG: Illustrates how to seed the random number generator with a specific value to ensure reproducible results.
//!
//! - Generating random integers: Shows various ways to generate random integers within different ranges.
//!
//! - Generating random booleans: Demonstrates how to generate random boolean values with customizable probabilities.
//!
//! - Generating random bytes: Shows how to generate random byte sequences of specified lengths.
//!
//! - Generating random characters and strings: Illustrates how to generate random characters and strings of specified lengths.
//!
//! - Shuffling and sampling: Shows how to shuffle and sample elements from slices using the `shuffle`, `sample`, and `sample_with_replacement` methods.
//!
//! - Serialization and deserialization: Demonstrates how to serialize and deserialize the random number generator state to/from JSON.
//!
//! - Custom Mersenne Twister configuration: Shows how to create a custom configuration for the Mersenne Twister RNG and serialize it to a file.
//!
//! - Comparing `vrd` RNG with Rust's default RNG: Compares the random number generated by `vrd` RNG with Rust's default RNG.
//!

use vrd::mersenne_twister::{
    MersenneTwisterConfig, MersenneTwisterParams,
};
use vrd::random::Random;
use vrd::{
    rand_bool, rand_bytes, rand_char, rand_choose, rand_float,
    rand_int, rand_pseudo, rand_range, rand_seed, rand_twist,
    random_range,
};

fn main() {
    // Initializing a new random number generator (RNG) instance.
    let mut rng = Random::from_entropy();
    println!("ðŸ¦€ Random::new():         âœ… {rng}");

    // Accessing the default RNG provided by the `vrd` crate.
    let default = Random::default();
    println!("ðŸ¦€ Random::default():     âœ… {default}");

    // Seeding the RNG with a specific value to ensure reproducible results.
    let seed_value = 12345;
    rng.seed(seed_value);
    println!("ðŸ¦€ Random::seed():        âœ… {}", seed_value);

    // Generating a random integer between 0 and the maximum value a u32 can hold.
    let random = rng.rand();
    println!("ðŸ¦€ Random::random():      âœ… {random}");

    // Generating a random double-precision floating-point number.
    let random_double = Random::double(&mut rng);
    println!("ðŸ¦€ Random::double():      âœ… {}", random_double);

    // Generating a random 64-bit signed integer.
    let random_i64 = rng.i64();
    println!("ðŸ¦€ Random::i64():         âœ… {}", random_i64);

    // Generating a random 64-bit unsigned integer.
    let random_u64 = rng.u64();
    println!("ðŸ¦€ Random::u64():         âœ… {}", random_u64);

    // Generating a random 64-bit floating-point number.
    let random_f64 = rng.f64();
    println!("ðŸ¦€ Random::f64():         âœ… {}", random_f64);

    // Generating a random floating-point number between 0 and 1.
    let float = rng.rand() as f32 / 0x7FFF as f32;
    println!("ðŸ¦€ Random::float():       âœ… {float}");

    // Producing a random usize value.
    let int = rng.rand() as usize;
    println!("ðŸ¦€ Random::int():         âœ… {int}");

    // Generating a random integer within the specified range (0 to 100).
    let min = 0;
    let max = 100;
    let rand_int = rand_int!(rng, min, max);
    println!(
        "ðŸ¦€ Random integer between {} and {}: {}",
        min, max, rand_int
    );

    // Generating a random number within a specified range using the `rand_range` macro.
    let rand_range_macro = rand_range!(rng, 10, 20);
    println!(
        "ðŸ¦€ Random number between 10 and 20: {}",
        rand_range_macro
    );

    // Generating a random floating-point number within a specified range.
    let rand_range =
        rand_float!(rng) * (max as f32 - min as f32) + min as f32;
    println!(
        "ðŸ¦€ Random number between {} and {}: {}",
        min, max, rand_range
    );

    // Creating a random 32-bit unsigned integer within a specified range.
    let rand_uint = random_range!(rng, 0, u32::MAX);
    println!(
        "ðŸ¦€ Random u32 between 0 and u32::max_value(): {}",
        rand_uint
    );

    // Generating a random boolean with a 50% probability.
    let rand_bool = rand_bool!(rng, 0.5);
    println!("ðŸ¦€ Random boolean with 50% probability: {}", rand_bool);

    // Creating a vector of 10 random bytes.
    let rand_bytes = rand_bytes!(rng, 10);
    println!("ðŸ¦€ Random bytes: {:?}", rand_bytes);

    // Creating a vector of 1000 random bytes.
    let bytes = Random::bytes(&mut rng, 1000);
    println!("ðŸ¦€ Random::bytes():       âœ… {bytes:?}");

    // Generating a random character within the range 'a' to 'z'.
    let rand_char = rand_char!(rng);
    println!("ðŸ¦€ Random char between 'a' and 'z': {}", rand_char);

    // Generating a random string of length 10.
    let random_string = rng.string(10);
    println!("ðŸ¦€ Random string: {}", random_string);

    // Picking a random element from a predefined slice of integers.
    let values = &[1, 2, 3, 4, 5];
    let rand_choose = rand_choose!(rng, values);
    println!(
        "ðŸ¦€ Random element from [1, 2, 3, 4, 5]: {:?}",
        rand_choose
    );

    // Example of using the `rand_slice` function to generate a random subslice from a given slice.
    let rand_slice = Random::rand_slice(&mut rng, values, 3);
    println!("ðŸ¦€ Random sub-slice of length 3: {:?}", rand_slice);

    // Example of using the `shuffle` method to randomly shuffle a mutable slice.
    let mut shuffle_values = [1, 2, 3, 4, 5];
    Random::shuffle(&mut rng, &mut shuffle_values);
    println!("ðŸ¦€ Shuffled slice: {:?}", shuffle_values);

    // Example of using the `sample` method to randomly sample elements from a slice without replacement.
    let samples = Random::sample(&mut rng, values, 3);
    println!("ðŸ¦€ Random samples without replacement: {:?}", samples);

    // Example of using the `sample_with_replacement` method to randomly sample elements from a slice with replacement.
    let samples_with_replacement =
        Random::sample_with_replacement(&mut rng, values, 3);
    println!(
        "ðŸ¦€ Random samples with replacement: {:?}",
        samples_with_replacement
    );

    // Example of using the `fill` method to fill a mutable slice with random values.
    let mut buffer = [0; 10];
    Random::fill(&mut rng, &mut buffer);
    println!("ðŸ¦€ Filled buffer with random values: {:?}", buffer);

    // Creating a random 32-bit unsigned integer using a pseudo-random number generator (PRNG).
    let rand_pseudo = rand_pseudo!(rng);
    println!("ðŸ¦€ Random u32 using the PRNG: {}", rand_pseudo);

    // Seeding the PRNG with a specific value to get deterministic outputs.
    rand_seed!(rng, 42);
    let rand_seed = rand_pseudo!(rng);
    println!("ðŸ¦€ Random u32 using the seeded PRNG: {}", rand_seed);

    // Altering the state of the PRNG to vary its output.
    rand_twist!(rng);
    let rand_twist = rand_pseudo!(rng);
    println!(
        "ðŸ¦€ Random u32 after twisting the PRNG state: {}",
        rand_twist
    );

    // Retrieving the current state index (MTI) of the Mersenne Twister RNG.
    let mti_value = Random::mti(&rng);
    println!("ðŸ¦€ MTI value: {}", mti_value);

    // Generate a random even number.
    let even_number =
        (0..).map(|_| rng.rand()).find(|&n| n % 2 == 0).unwrap();
    println!("ðŸ¦€ Random even number: {}", even_number);

    // Pre-generating a large number of random values for performance.
    let mut pre_generated_numbers = Vec::new();
    for _ in 0..1000 {
        pre_generated_numbers.push(rng.rand());
    }
    println!(
        "ðŸ¦€ Pre-generated random numbers: {:?}",
        pre_generated_numbers
    );

    // Comparing `vrd` RNG with Rust's default RNG.
    let default_rng_number = rand::random::<u32>();
    let vrd_rng_number = rng.rand();
    println!(
        "ðŸ¦€ Default RNG number: {}, `vrd` RNG number: {}",
        default_rng_number, vrd_rng_number
    );

    // Serialize the random number generator to JSON.
    let serialized_rng = serde_json::to_string(&rng).unwrap();
    println!("ðŸ¦€ Serialized RNG: {}", serialized_rng);

    // Deserialize the random number generator from JSON.
    let deserialized_rng: Random =
        serde_json::from_str(&serialized_rng).unwrap();
    println!("ðŸ¦€ Deserialized RNG: {:?}", deserialized_rng);

    // Creating a custom Mersenne Twister configuration.
    let params = MersenneTwisterParams {
        matrix_a: 0x9908b0df,
        upper_mask: 0x80000000,
        lower_mask: 0x7fffffff,
        tempering_mask_b: 0x9d2c5680,
        tempering_mask_c: 0xefc60000,
    };

    // Creating a custom Mersenne Twister configuration.
    let config = MersenneTwisterConfig::new_custom(624, 397, params);
    println!("ðŸ¦€ Custom MersenneTwisterConfig: {}", config);

    // Serialize to a file
    MersenneTwisterConfig::serialize_to_file(&config, "config.json")
        .unwrap();
    println!("ðŸ¦€ Serialized MersenneTwisterConfig to file");

    // Deserialize from a file
    let deserialized_config =
        MersenneTwisterConfig::deserialize_from_file("config.json")
            .unwrap();
    println!(
        "ðŸ¦€ Deserialized MersenneTwisterConfig from file: {:?}",
        deserialized_config
    );
}
